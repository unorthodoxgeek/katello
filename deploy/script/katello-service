#!/usr/bin/env ruby

require 'optparse'

ACTIONS = ['restart', 'stop', 'start', 'status']
COMMAND = '/usr/sbin/service-wait'
SERVICES = {
  'qpidd'                 => 10,
  'qdrouterd'             => 10,
  'tomcat'                => 20,
  'tomcat6'               => 20,
  'elasticsearch'         => 20,
  'pulp_workers'          => 20,
  'pulp_celerybeat'       => 20,
  'pulp_resource_manager' => 20,
  'mongod'                => 20,
  'foreman-proxy'         => 20,
  'httpd'                 => 30,
  'foreman-tasks'         => 30
}

@options = {:excluded => []}

OptionParser.new do |opts|
  opts.banner = "Usage: katello-service [options] [stop|start|restart|status]"

  opts.on("--exclude [SERVICES]", Array, "A comma-separated list of services to skip") do |exclude|
    @options[:excluded] = exclude
  end

  opts.parse!

  if ARGV.length == 0 || ARGV.length != 1
    puts opts
    exit
  else
    opts.abort("Received unsupported arguments: #{ARGV[0]}") unless ACTIONS.include?(ARGV[0])
  end

  @options[:action] = ARGV[0]
end

def service_exists?(service)
  upstart = File.exist?("/etc/init.d/#{service}")
  systemd = `systemctl is-enabled #{service} 2>&1` && $?.success?
  upstart || systemd
end

def services_by_priority
  SERVICES.sort_by { |_, value| value }.map { |service| service[0] } - @options[:excluded]
end

failures = []

services_by_priority.each do |service|
  if service_exists?(service)
    puts `#{COMMAND} #{service} #{@options[:action]}`
    failures << service unless $?.success?
  end
end

if failures.empty?
  puts "Success!"
  exit 0
else
  puts "Some services failed: #{failures.join(',')}"
  exit 1
end
